from tkinter import *  # Импортируем содержимое модуля tkinter, который позволит нам работать с оконным приложением нашей будущей игры
import random  # Импортируем модуль random, он понадобится в нашей игре чуть позже
import time  # Импортируем модуль time, он понадобится нам чуть позже в нашей игре


# Создадим класс Ball - мяч и опишем его свойства
class Ball:
    def __init__(self, canvas, color):  # Напишем функцию, которая будет создавть новый объект класса Ball
        self.canvas = canvas  # Закрепим наш мяч за используемым холстом
        self.form = canvas.create_oval(10, 10, 25, 25, fill=color)  # Определим форму нашего мяча: 10 и 10 - координаты верхнего левого края. 25 и 25 - координаты нижнего правого края.
        self.canvas.move(self.form, 245, 100)  # Переместим мяч примерно в центр холста
        starts = [-3, -2, -1, 1, 2, 3]  # Создадим список возможных начальных скоростей движения мяча по горизонтали
        random.shuffle(starts)  # При помощи фцнкции shuffle перемешаем элементы в списке starts
        self.x = starts[0]  # Возьмем случайное первое значение из списка starts
        self.y = -3  # Зададим начальную скорость движения мяча по вертикали.
        self.canvas_height = self.canvas.winfo_height()  # Сохраним высоту холста в свойстве мяча
        self.canvas_width = self.canvas.winfo_width()  # Сохраним ширину холста в свойствах мяча

    def draw(self):
        self.canvas.move(self.form, self.x, self.y)  # Пусть мяч переместится на на 1 пиксель вверх
        pos = self.canvas.coords(self.form)  # Сохраним текущие координаты мяча в переменнную pos с помощью функции coords
        # Функция coords возвращает список, который содержит коодинаты объекта следующим образом: [x координата левого верхнего края, y координата левого верхнего края, x координата нижнего правого края, y координата нижнего правого края]
        if pos[1] <= 0:  # В случае если мяч касается верхнего края холста, то он начинает лететь вниз
            self.y = 3
        if pos[3] >= self.canvas_height:  # В случае если мяч касается ниженго края холста, то он начинает лететь вверх
            self.y = -3
        if pos[0] <= 0:  # В случае если мяч касается левого края холста, то он начинает лететь вправо
            self.x = 3
        if pos[2] >= self.canvas_width:  # В случае если мяч касается правого края холста, то он начинает лететь влево
            self.x = -3


# Переходим к написанию алгоритма нашей игры
game = Tk()  # При помощи функции Tk() из модуля tkinter создадим объект game, который будет представлять окно нашей будущей игры
# Немного поработаем над внешним видом окна нашей будущей игры
game.title("Скачущий мяч")  # Дадим нашему окну заголовок
game.resizable(0, 0)  # Сделаем окно нашей игры фиксированного размера. Нули означают фиксированный размер окна как по горизонтали, так и по вертикали
game.wm_attributes("-topmost", 1)  # Параметр -topmost разместит окно поверх всех окон на рабочем столе
# Координаты холста в tkinter начинаются из верхнего левого угла окна, причем координата y перевернута и увеличивается при движении вниз
canvas = Canvas(game, width=500, height=400, bd=0,  # Создадим холст с указанными в скобках параметрами. bd = border (граница окна), highlightthickness - толщина границы
                highlightthickness=0)  # Окно будет не иметь границ
canvas.pack()  # Настраиваем холст с параметрами, указанными строкой выше
game.update()  # Для окна запускается цикл ожидания и обработки событий. (Подготовка к игровой анимации)

ball = Ball(canvas, 'red')  # Теперь создадим объект класса мяч, придадим ему красный цвет
# Если на данном этапе запустить программу, то окно сразу закроется

# Создадим вечный цикл, внутри которго будет работать наша игра
while 1:
    ball.draw()  # Передадим мячу команду движения
    game.update_idletasks()  # Для окна запускается цикл обновления холста
    game.update()  # Подготовка холста к анимации
    time.sleep(0.01)  # Воспользуемся модулем time и сделаем задержку на 0.01 сек между обновлениями холста и создания иллюзии анимации

# На этом месте можно закончить занятие. В следующий раз можно будет доделать игру.